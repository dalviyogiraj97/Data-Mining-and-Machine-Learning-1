?mean
?rnorm
x <- rnorm(50)
x
x = rnorm(400)
x
``
plot(x,y)
x = rnorm(400)
y = rnorm(x)
plot(x,y)
hist(500
hist(500)
hist(x)
boxplot(x)
x <- NULL
rm(y)
x <- c(10.4,56,3,87,34,1,90)
y <- x * 10
y
str(x)
summary(x)
mean(x)
temp <- x > 13
temp
temp2 <- x < 7 & x > 4
temp2
lapply(x, myadd1)
lapply(x, myadd1())
myadd1(x)
1:5
x[2:3]
x[2:4]
print("The temperature in Celcius is:",celc)
celc = ((temp-32)*(5/9))
print(paste(celc, "The temperature in Celcius is:", sep = " "))
cls
22
print(paste(celc, "The temperature in Celcius is:", sep = " "))
temp <- a.numeric(readline("Please enter temperature in Fahrenheit:"))
temp <- as.numeric(readline("Please enter temperature in Fahrenheit:"))
celc = ((temp-32)*(5/9))
print(paste(celc, "The temperature in Celcius is:", sep = " "))
print(paste("The temperature in Celcius is:", celc, sep = " "))
temp <- as.numeric(readline("Please enter temperature in Fahrenheit:"))
celc = ((temp-32)*(5/9))
print(paste("The temperature in Celcius is:", celc, sep = " "))
print(paste("The temperature in Celcius is:", celc, sep = " "))
print(paste("The temperature in Celcius is:", celc, sep = " "))
attributes(x)
name <- c("Sanket","Nishant","Yogiraj")
name
DAD <- c(80,60,70)
BDA <- c(50,70,40)
gender <- as.factor(c("M","F","M"))
nationality <- as.factor(c("UK","IRE","IND"))
age <- c(24,25,24)
student.df <- data.frame(name, age, gender, nationality, DAD, BDA)
attributes(student.df)
print(student.df)
student.df['gender']
student.df$gender
student.df$average <- (student.df$BDA + student.df$DAD)/2
student.df
str(student.df)
student.df
str(student.df$gender)
student.df
str(student.df)
student.df$gender <- as.character(student.df$gender)
str(student.df)
student.df <- rbind(student.df, c("Ashish, 22, "M", "IND", 72, 80))
student.df <- rbind(student.df, c("Ashish", 22, "M", "IND", 72, 80))
student.df
student.df <- student.df[-c(4),]
student.df
student.df <- student.df[-c(3),]
student.df
student.df <- rbind(student.df, c("Yogiraj", 24, "M", "IND", 70, 40))
student.df
student.df$average <- (student.df$BDA + student.df$DAD)/2
help.start()
y <- rnorm(x)
x <- rnorm(50)
y <- rnorm(x)
plot(x,y)
hist(x, y, col="black")
hist(x, y)
hist(x, y)
help.start()
hist(x)
hist(x,y)
boxplot(x)
hist(x)
rm(y)
y
1/x
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
1/x
temp <- x>13
temp
task1 <- x>3 && x<7
task1
x <- c(10.4, 5.6, 3.1, 6.4, 21.7)
task1 <- x>3 && x<7
task1
task1 <- (x>3 && x<7)
task1
task1 <- x>3 | x<7
task1
task1 <- x>3 & x<7
task1
paste(c("A","B"), 1:10, sep=" ")
paste(c("A","B"), 1:10, sep="")
z <- c(4:8,NA)
is.na(z)
x <- c(-5:-1, NA, NA, 1:3)
y <- x[!is.na(x)]
y
library(dplyr)
library(dplyr)
install.packages("dplyr")
installed.packages("dplyr")
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
library(dplyr)
titanicData <-read.csv("titanic.csv", header=T, na.strings=c(""),stringsAsFactors = T)
titanicData <-read.csv("\Users\Yogiraj\Documents\National College of Ireland\R Lab\Lap Exercises\titanic.csv", header=T, na.strings=c(""),stringsAsFactors = T)
titanicData <-read.csv("/Users/Yogiraj\Documents/National College of Ireland/R Lab/Lap Exercises/titanic.csv", header=T, na.strings=c(""),stringsAsFactors = T)
titanicData <-read.csv("/Users/Yogiraj/Documents/National College of Ireland/R Lab/Lap Exercises/titanic.csv", header=T, na.strings=c(""),stringsAsFactors = T)
titanicData$Survived = as.factor((titanicData$Survived))
titanicData$Pclass <- as.factor(titanicData$Pclass)
String(titanicData)
titanicData.df
embarkedNAs <- titanicData %>%
filter(PassengerId ==  62 | PassengerId  == 830)
print(embarkedNAs[,c(3,10,4)])
ImputedAgeMean <- titanicData$Age
ImputedAgeMean[is.na(ImputedAgeMean)] <- mean(ImputedAgeMean, na.rm = TRUE)
ImputedAgeMean
ImputedAgeMean[is.na(ImputedAgeMean)]
ImputedAgeMean <- titanicData$Age
ImputedAgeMean[is.na(ImputedAgeMean)] <- mean(ImputedAgeMean, na.rm = TRUE)
ImputedAgeMean[is.na(ImputedAgeMean)]
ImputedAgeMean
par(mfrow=c(1,2))
hist(titanicData$Age)
hist(ImputedAgeMean)
ImputedAgeMedian <- titanicData$Age
ImputedAgeMedian[is.na(ImputedAgeMedian)] <- mean(ImputedAgeMedian, na.rm = TRUE)
par(mfrow=c(1,2))
hist(titanicData$Age)
hist(ImputedAgeMedian)
library(MASS)
library(ISLR2)
install package("ISLR2")
install packages("ISLR2")
install.packages("ISLR2")
library(ISLR2)
library(ISLR2)
head(Boston)
lm.fit <- lm(medv ∼ lstat , data = Boston)
attach (Boston)
attach (Boston)
attach (Boston)
lm.fit <- lm(medv ∼ lstat)
lm.fit
summary(lm.fit)
names(lm.fit)
coef(lm.fit)
confint(lm.fit)
predict(lm.fit, data.frame(lstat = c(5,10,15)), interval = "confidence")
predict(lm.fit, data.frame(lstat = c(5,10,15)), interval = "prediction")
plot(lstat, medv)
abline(lm.fit)
abline(lm.fit, lwd=3)
abline(lm.fit, lwd=3, col="red")
plot(lstat, medv, col = "red")
plot(lstat, medv, pch = 20)
plot(lstat, medv. pch = "+")
plot(lstat, medv. pch = "+")
plot(lstat, medv, pch = "+")
plot(1:20, 1:20, pch = 1:20)
par(mfrow = c(2,2))
par(mfrow = c(2,2))
plot(lm.fit)
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(predict(lm.fit)), rstudent(lm.fit))
Plot(predict(lm.fit), rstudent(lm.fit))
plot(1:20, 1:20, pch = 1:20)
gc()
library(caret)
library(irr)
library(rpart)
library(tidyverse)
library(e1071)
setwd("~/National College of Ireland/Machine Learning Project/Final Datasets/Jupyter FIles/Telecom Customer Churn Analysis")
TelCust <- read.csv(file="Churn_100k.csv")
head(TelCust)
#Print the structure of the dataframe
print(str(TelCust))
#Checking if there are any null values
sapply(TelCust,function(x) sum(is.na(x)))
TelCust_new <- na.omit(TelCust)
sapply(TelCust_new,function(x) sum(is.na(x)))
summary(TelCust_new)
TelCust_new$EmployeeCount <- NULL
TelCust_new$EmployeeNumber <- NULL
TelCust_new$StandardHours <- NULL
TelCust_new$Over18 <- NULL
TelCust_new$Application.ID <- NULL
TelCust_new$Employee.Source <- NULL
summary(TelCust_new)
TelCust_new$EVENT_LABEL <- ifelse(TelCust_new$EVENT_LABEL == "fraud",1,0)
# Check for any correlated variables
library(corrplot)
cor <- cor(TelCust_new[sapply(TelCust_new,is.numeric)])
cor(cor)
TelCust_new$gender <- as.factor(TelCust_new$gender)
TelCust_new$EVENT_LABEL <- as.factor(TelCust_new$EVENT_LABEL)
str(TelCust_new)
library(caTools)
set.seed(1000)
split = sample.split(TelCust_new$EVENT_LABEL, SplitRatio = 0.7)
training_set = subset(TelCust_new, split == TRUE)
test_set = subset(TelCust_new, split == FALSE)
View(training_set)
View(test_set)
library(smotefamily)
library(SMOTE)
library(e1071)
svm1 <- svm(EVENT_LABEL ~ ., data = training_set)
gc()
svm1 <- svm(EVENT_LABEL ~ ., data = training_set)
svm1 <- svm(EVENT_LABEL ~ ., data = training_set)
svm1 <- svm(EVENT_LABEL ~ ., data = training_set)
gc()
svm1 <- svm(EVENT_LABEL ~ ., data = training_set)
summary(TelCust_new)
View(TelCust_new)
TelCust_new$gender <- as.factor(TelCust_new$gender)
TelCust_new$EVENT_LABEL <- as.factor(TelCust_new$EVENT_LABEL)
TelCust_new$monthly_minutes <- as.factor(TelCust_new$monthly_minutes)
TelCust_new$customerServiceCalls <- as.factor(TelCust_new$customerServiceCalls)
TelCust_new$streaming_minutes <- as.factor(TelCust_new$streaming_minutes)
TelCust_new$TotalBilled <- as.factor(TelCust_new$TotalBilled)
TelCust_new$PrevBalance <- as.factor(TelCust_new$PrevBalance)
TelCust_new$latePayments <- as.factor(TelCust_new$latePayments)
TelCust_new$ip_address_asn <- as.factor(TelCust_new$ip_address_asn)
TelCust_new$phone_area_code <- as.factor(TelCust_new$phone_area_code)
TelCust_new$customer_reg_date <- as.factor(TelCust_new$email_domain)
TelCust_new$phoneModel <- as.factor(TelCust_new$phoneModel)
TelCust_new$billing_postal <- as.factor(TelCust_new$billing_postal)
TelCust_new$latePayments <- as.factor(TelCust_new$billing_state)
TelCust_new$partner <- as.factor(TelCust_new$partner)
TelCust_new$PhoneService <- as.factor(TelCust_new$PhoneService)
TelCust_new$MultipleLines <- as.factor(TelCust_new$MultipleLines)
str(TelCust_new)
library(caTools)
set.seed(1000)
split = sample.split(TelCust_new$EVENT_LABEL, SplitRatio = 0.7)
training_set = subset(TelCust_new, split == TRUE)
test_set = subset(TelCust_new, split == FALSE)
View(training_set)
View(test_set)
install.packages("smotefamily")
install.packages("SMOTE")
str(training_set)
library(e1071)
svm1 <- svm(EVENT_LABEL ~ ., data = training_set)
svm1
str(training_set)
install.packages("plotROC")
library(plotROC)
predict_svm <- predict(svm1, newdata = test_set)
predict_svm
library(caret)
conf_mat <- confusionMatrix(as.factor(predict_svm),test_set$EVENT_LABEL, positive = "1")
conf_mat
accuracy <- conf_mat$overall[1]
model <- "SVM Model"
Accuracy_table <- data.frame(model,accuracy)
svm1 <- knn(EVENT_LABEL ~ ., data = training_set,k=5)
install.packages("class")
